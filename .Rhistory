mutate(
price = as.numeric(as.character(price)),     # Convert 'price' to numeric
year = as.numeric(as.character(year)),       # Convert 'year' to numeric
mileage = as.numeric(as.character(mileage)) # Convert 'mileage' to numeric
)
return(data)
}) %>%
bind_rows() # Combine all data frames into one
# Remove rows with missing or invalid values in 'year', 'price', or 'mileage'
cleaned_data <- all_datasets %>%
filter(!is.na(year) & !is.na(price) & !is.na(mileage))
# Check the structure of the cleaned dataset
cat("\nStructure of the cleaned dataset:\n")
str(cleaned_data)
# Calculate Pearson's correlation between 'year' and 'price'
correlation <- cor(cleaned_data$year, cleaned_data$price, method = "pearson")
# Display the correlation result
cat("\nPearson's correlation coefficient between year and price is:", correlation, "\n")
# Perform statistical significance test
correlation_test <- cor.test(cleaned_data$year, cleaned_data$price, method = "pearson")
# Display the test result
cat("\nStatistical significance test results:\n")
print(correlation_test)
# Load necessary libraries
library(dplyr)
library(ggplot2) # For plotting
# Specify the directory where the datasets are stored
data_directory <- "G:/Hertfordshire Class/Team Research & Development/archive"
# List all CSV files in the directory
file_list <- list.files(path = data_directory, pattern = "*.csv", full.names = TRUE)
# Read, clean, and combine all datasets
all_datasets <- file_list %>%
lapply(function(file) {
data <- read.csv(file)
data <- data %>%
mutate(
price = as.numeric(as.character(price)),     # Convert 'price' to numeric
year = as.numeric(as.character(year)),       # Convert 'year' to numeric
mileage = as.numeric(as.character(mileage)) # Convert 'mileage' to numeric
)
return(data)
}) %>%
bind_rows() # Combine all data frames into one
# Remove rows with missing or invalid values in 'year', 'price', or 'mileage'
cleaned_data <- all_datasets %>%
filter(!is.na(year) & !is.na(price) & !is.na(mileage))
# Check the structure of the cleaned dataset
cat("\nStructure of the cleaned dataset:\n")
str(cleaned_data)
# Calculate Pearson's correlation between 'year' and 'price'
correlation <- cor(cleaned_data$year, cleaned_data$price, method = "pearson")
# Display the correlation result
cat("\nPearson's correlation coefficient between year and price is:", correlation, "\n")
# Perform statistical significance test
correlation_test <- cor.test(cleaned_data$year, cleaned_data$price, method = "pearson")
# Display the test result
cat("\nStatistical significance test results:\n")
print(correlation_test)
# Create a scatter plot with regression line
plot <- ggplot(cleaned_data, aes(x = year, y = price)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(
title = "Scatter Plot of Car Price vs. Year",
x = "Year",
y = "Price"
) +
theme_minimal()
# Display the plot
print(plot)
# Load necessary libraries
library(dplyr)
library(ggplot2) # For plotting
# Specify the directory where the datasets are stored
data_directory <- "G:/Hertfordshire Class/Team Research & Development/archive"
# List all CSV files in the directory
file_list <- list.files(path = data_directory, pattern = "*.csv", full.names = TRUE)
# Read, clean, and combine all datasets
all_datasets <- file_list %>%
lapply(function(file) {
data <- read.csv(file)
data <- data %>%
mutate(
price = as.numeric(as.character(price)),     # Convert 'price' to numeric
year = as.numeric(as.character(year)),       # Convert 'year' to numeric
mileage = as.numeric(as.character(mileage)) # Convert 'mileage' to numeric
)
return(data)
}) %>%
bind_rows() # Combine all data frames into one
# Remove rows with missing or invalid values in 'year', 'price', or 'mileage'
cleaned_data <- all_datasets %>%
filter(!is.na(year) & !is.na(price) & !is.na(mileage))
# Debugging: Check if cleaned_data has valid numeric values
cat("\nPreview of cleaned_data:\n")
print(head(cleaned_data))
cat("\nStructure of cleaned_data:\n")
str(cleaned_data)
# Check for any unexpected data in 'year' or 'price'
cat("\nSummary of 'year':\n")
print(summary(cleaned_data$year))
cat("\nSummary of 'price':\n")
print(summary(cleaned_data$price))
# Calculate Pearson's correlation between 'year' and 'price'
correlation <- cor(cleaned_data$year, cleaned_data$price, method = "pearson")
# Display the correlation result
cat("\nPearson's correlation coefficient between year and price is:", correlation, "\n")
# Perform statistical significance test
correlation_test <- cor.test(cleaned_data$year, cleaned_data$price, method = "pearson")
# Display the test result
cat("\nStatistical significance test results:\n")
print(correlation_test)
# Create a scatter plot with regression line
if (nrow(cleaned_data) > 1) {
plot <- ggplot(cleaned_data, aes(x = year, y = price)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +
labs(
title = "Scatter Plot of Car Price vs. Year",
x = "Year",
y = "Price"
) +
theme_minimal()
# Display the plot
print(plot)
} else {
cat("\nNot enough data points to generate a plot.\n")
}
# Load required packages
library(dplyr)
library(ggplot2)
# Define the directory path containing datasets
directory_path <- "G:/Hertfordshire Class/Team Research & Development/archive"
# Load and combine all datasets
combined_data <- list.files(directory_path, pattern = "*.csv", full.names = TRUE) %>%
lapply(read.csv, stringsAsFactors = FALSE) %>%
bind_rows()
# Load required packages
library(dplyr)
library(ggplot2)
# Define the directory path containing datasets
directory_path <- "G:/Hertfordshire Class/Team Research & Development/archive"
# Load and combine all datasets, standardizing column types
combined_data <- list.files(directory_path, pattern = "*.csv", full.names = TRUE) %>%
lapply(function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
data %>%
mutate(
price = as.numeric(as.character(price)), # Convert 'price' to numeric
mileage = as.numeric(as.character(mileage)) # Convert 'mileage' to numeric if present
)
}) %>%
bind_rows()
# Clean and prepare data
cleaned_data <- combined_data %>%
filter(!is.na(price) & !is.na(year)) # Remove rows with missing 'price' or 'year'
# Create a histogram of car prices
if (nrow(cleaned_data) > 1) {
plot <- ggplot(cleaned_data, aes(x = price)) +
geom_histogram(binwidth = 1000, fill = "blue", color = "black", alpha = 0.7) +
labs(
title = "Histogram of Car Prices",
x = "Price",
y = "Frequency"
) +
theme_minimal()
# Save the histogram as a PNG file
plot_file_path <- "G:/Hertfordshire Class/Team Research & Development/archive/price_histogram.png"
ggsave(filename = plot_file_path, plot = plot, width = 8, height = 6, dpi = 300)
cat("\nHistogram saved successfully at:", plot_file_path, "\n")
} else {
cat("\nNot enough data points to generate a histogram.\n")
}
# Load required packages
library(dplyr)
library(ggplot2)
# Define the directory path containing datasets
directory_path <- "G:/Hertfordshire Class/Team Research & Development/archive"
# Load and combine all datasets, standardizing column types
combined_data <- list.files(directory_path, pattern = "*.csv", full.names = TRUE) %>%
lapply(function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
data %>%
mutate(
price = as.numeric(as.character(price)), # Convert 'price' to numeric
mileage = as.numeric(as.character(mileage)) # Convert 'mileage' to numeric if present
)
}) %>%
bind_rows()
# Clean and prepare data
cleaned_data <- combined_data %>%
filter(!is.na(price) & !is.na(year)) # Remove rows with missing 'price' or 'year'
# Create a histogram of car prices
if (nrow(cleaned_data) > 1) {
plot <- ggplot(cleaned_data, aes(x = price)) +
geom_histogram(binwidth = 1000, fill = "blue", color = "white", alpha = 0.7) +
labs(
title = "Histogram of Car Prices",
x = "Price",
y = "Frequency"
) +
theme_minimal()
# Save the histogram as a PNG file
plot_file_path <- "G:/Hertfordshire Class/Team Research & Development/archive/price_histogram.png"
ggsave(filename = plot_file_path, plot = plot, width = 8, height = 6, dpi = 300)
cat("\nHistogram saved successfully at:", plot_file_path, "\n")
} else {
cat("\nNot enough data points to generate a histogram.\n")
}
# Load required packages
library(dplyr)
library(ggplot2)
# Define the directory path containing datasets
directory_path <- "G:/Hertfordshire Class/Team Research & Development/archive"
# Load and combine all datasets, standardizing column types
combined_data <- list.files(directory_path, pattern = "*.csv", full.names = TRUE) %>%
lapply(function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
data %>%
mutate(
price = as.numeric(as.character(price)), # Convert 'price' to numeric
mileage = as.numeric(as.character(mileage)) # Convert 'mileage' to numeric if present
)
}) %>%
bind_rows()
# Clean and prepare data
cleaned_data <- combined_data %>%
filter(!is.na(price) & !is.na(year)) # Remove rows with missing 'price' or 'year'
# Create a histogram of car prices
if (nrow(cleaned_data) > 1) {
plot <- ggplot(cleaned_data, aes(x = price)) +
geom_histogram(binwidth = 1000, fill = "blue", color = "black", alpha = 0.7) +
labs(
title = "Histogram of Car Prices",
x = "Price",
y = "Frequency"
) +
theme_minimal()
# View the histogram in RStudio
print(plot)  # This will display the plot in RStudio's Plots pane
# Save the histogram as a PNG file
plot_file_path <- "G:/Hertfordshire Class/Team Research & Development/archive/price_histogram.png"
ggsave(filename = plot_file_path, plot = plot, width = 8, height = 6, dpi = 300)
cat("\nHistogram saved successfully at:", plot_file_path, "\n")
} else {
cat("\nNot enough data points to generate a histogram.\n")
}
# Load required packages
library(dplyr)
library(ggplot2)
# Define the directory path containing datasets
directory_path <- "G:/Hertfordshire Class/Team Research & Development/archive"
# Load and combine all datasets, standardizing column types
combined_data <- list.files(directory_path, pattern = "*.csv", full.names = TRUE) %>%
lapply(function(file) {
data <- read.csv(file, stringsAsFactors = FALSE)
data %>%
mutate(
price = as.numeric(as.character(price)), # Convert 'price' to numeric
mileage = as.numeric(as.character(mileage)) # Convert 'mileage' to numeric if present
)
}) %>%
bind_rows()
# Clean and prepare data
cleaned_data <- combined_data %>%
filter(!is.na(price) & !is.na(year)) # Remove rows with missing 'price' or 'year'
# Print the cleaned data
cat("Cleaned Data:\n")
print(head(cleaned_data))  # Prints first few rows of the cleaned data
# Pearson correlation test between 'year' and 'price'
correlation_result <- cor.test(cleaned_data$year, cleaned_data$price, method = "pearson")
# Print the correlation test result
cat("\nPearson Correlation Test Results:\n")
print(correlation_result)
# Create a histogram of car prices
if (nrow(cleaned_data) > 1) {
plot <- ggplot(cleaned_data, aes(x = price)) +
geom_histogram(binwidth = 1000, fill = "blue", color = "black", alpha = 0.7) +
labs(
title = "Histogram of Car Prices",
x = "Price",
y = "Frequency"
) +
theme_minimal()
# View the histogram in RStudio
print(plot)  # This will display the plot in RStudio's Plots pane
# Save the histogram as a PNG file
plot_file_path <- "G:/Hertfordshire Class/Team Research & Development/archive/price_histogram.png"
ggsave(filename = plot_file_path, plot = plot, width = 8, height = 6, dpi = 300)
cat("\nHistogram saved successfully at:", plot_file_path, "\n")
} else {
cat("\nNot enough data points to generate a histogram.\n")
}
# Load necessary libraries
library(tidyverse)
install.packages("tidyverse")
# Load necessary libraries
library(tidyverse)
# Set the directory path for your datasets
data_dir <- "G:/Hertfordshire Class/Team Research & Development/archive"
# List of dataset files (assuming they are CSV files)
file_names <- list.files(data_dir, pattern = "*.csv", full.names = TRUE)
# Read all datasets into a list
data_list <- lapply(file_names, read.csv)
# Combine all datasets into one
combined_data <- bind_rows(data_list)
# Install necessary packages if not already installed
install.packages("tidyverse")
install.packages("readr")
# Load the necessary libraries
library(tidyverse)
# Set the directory for your datasets
directory <- "G:/Hertfordshire Class/Team Research & Development/archive"
# List all the files in the directory (assuming they are CSV files)
files <- list.files(directory, full.names = TRUE, pattern = "\\.csv$")
# Read all datasets into a list
datasets <- lapply(files, read.csv)
# Check and convert 'price' and 'year' columns in each dataset
datasets <- lapply(datasets, function(df) {
# Convert 'price' column to numeric
df$price <- as.numeric(as.character(df$price))
df$year <- as.numeric(as.character(df$year))
return(df)
})
# Combine all datasets into one dataframe
combined_data <- bind_rows(datasets)
# Install necessary packages if not already installed
install.packages("tidyverse")
install.packages("readr")
# Load the necessary libraries
library(tidyverse)
# Set the directory for your datasets
directory <- "G:/Hertfordshire Class/Team Research & Development/archive"
# List all the files in the directory (assuming they are CSV files)
files <- list.files(directory, full.names = TRUE, pattern = "\\.csv$")
# Read all datasets into a list
datasets <- lapply(files, read.csv)
# Install necessary packages if not already installed
install.packages("tidyverse")
install.packages("readr")
# Load the necessary libraries
library(tidyverse)
# Set the directory for your datasets
directory <- "G:/Hertfordshire Class/Team Research & Development/archive"
# List all the files in the directory (assuming they are CSV files)
files <- list.files(directory, full.names = TRUE, pattern = "\\.csv$")
# Read all datasets into a list
datasets <- lapply(files, read.csv)
# Check and convert 'price' and 'year' columns in each dataset
datasets <- lapply(datasets, function(df) {
# Convert 'price' column to numeric
df$price <- as.numeric(as.character(df$price))
df$year <- as.numeric(as.character(df$year))
return(df)
})
# Combine all datasets into one dataframe
combined_data <- bind_rows(datasets)
install.packages("tidyverse")
# Load the necessary libraries
library(tidyverse)
# Set the directory for your datasets
directory <- "G:/Hertfordshire Class/Team Research & Development/archive"
# List all the files in the directory (assuming they are CSV files)
files <- list.files(directory, full.names = TRUE, pattern = "\\.csv$")
# Read all datasets into a list
datasets <- lapply(files, read.csv)
# Check and convert 'price' and 'year' columns in each dataset
datasets <- lapply(datasets, function(df) {
# Convert 'price' column to numeric
df$price <- as.numeric(as.character(df$price))
df$year <- as.numeric(as.character(df$year))
return(df)
})
# Combine all datasets into one dataframe
combined_data <- bind_rows(datasets)
# Load the necessary libraries
library(tidyverse)
# Set the directory for your datasets
directory <- "G:/Hertfordshire Class/Team Research & Development/archive"
# List all the files in the directory (assuming they are CSV files)
files <- list.files(directory, full.names = TRUE, pattern = "\\.csv$")
# Read all datasets into a list
datasets <- lapply(files, read.csv)
# Check and convert 'price' and 'year' columns in each dataset
datasets <- lapply(datasets, function(df) {
# Convert 'price' column to numeric
df$price <- as.numeric(as.character(df$price))
# Convert 'year' column to numeric
df$year <- as.numeric(as.character(df$year))
# Convert 'mileage' column to numeric if it's not already
if (is.character(df$mileage)) {
df$mileage <- as.numeric(as.character(df$mileage))
}
return(df)
})
# Combine all datasets into one dataframe
combined_data <- bind_rows(datasets)
# Clean the combined data to remove rows with NA values in 'price', 'year', or 'mileage'
cleaned_data <- combined_data %>%
filter(!is.na(price) & !is.na(year) & !is.na(mileage))
# Check the structure of the cleaned data
str(cleaned_data)
# Perform Pearson's correlation test
correlation_result <- cor.test(cleaned_data$year, cleaned_data$price, method = "pearson")
# Print the Pearson correlation test results
print(correlation_result)
# Plot a scatter plot of 'year' vs 'price'
ggplot(cleaned_data, aes(x = year, y = price)) +
geom_point(alpha = 0.5) +
labs(title = "Scatter Plot of Year vs Price",
x = "Year",
y = "Price") +
theme_minimal()
# Save the plot as a PNG file
ggsave("scatter_plot_year_vs_price.png")
# Optional: Print the cleaned data (you can adjust the number of rows to print)
print(head(cleaned_data))
# Install necessary packages if not already installed
install.packages("tidyverse")
install.packages("readr")
# Load the necessary libraries
library(tidyverse)
# Set the directory for your datasets
directory <- "G:/Hertfordshire Class/Team Research & Development/archive"
# List all the files in the directory (assuming they are CSV files)
files <- list.files(directory, full.names = TRUE, pattern = "\\.csv$")
# Read all datasets into a list
datasets <- lapply(files, read.csv)
# Check and convert 'price' and 'year' columns in each dataset
datasets <- lapply(datasets, function(df) {
# Convert 'price' column to numeric
df$price <- as.numeric(as.character(df$price))
# Convert 'year' column to numeric
df$year <- as.numeric(as.character(df$year))
# Convert 'mileage' column to numeric if it's not already
if (is.character(df$mileage)) {
df$mileage <- as.numeric(as.character(df$mileage))
}
return(df)
})
# Combine all datasets into one dataframe
combined_data <- bind_rows(datasets)
# Clean the combined data to remove rows with NA values in 'price', 'year', or 'mileage'
cleaned_data <- combined_data %>%
filter(!is.na(price) & !is.na(year) & !is.na(mileage))
# Check the structure of the cleaned data
str(cleaned_data)
# Perform Pearson's correlation test
correlation_result <- cor.test(cleaned_data$year, cleaned_data$price, method = "pearson")
# Print the Pearson correlation test results
print(correlation_result)
# Create a histogram of 'price' grouped by 'year'
ggplot(cleaned_data, aes(x = price, fill = as.factor(year))) +
geom_histogram(binwidth = 1000, alpha = 0.6, position = "identity", color = "black") +
labs(title = "Histogram of Price by Year",
x = "Price",
y = "Frequency",
fill = "Year") +
theme_minimal() +
scale_fill_viridis_d()  # Adds a color palette for years
# Save the histogram as a PNG file
ggsave("histogram_price_by_year.png")
# Optional: Print the cleaned data (you can adjust the number of rows to print)
print(head(cleaned_data))
# Install necessary packages if not already installed
install.packages("tidyverse")
install.packages("readr")
# Load the necessary libraries
library(tidyverse)
# Set the directory for your datasets
directory <- "G:/Hertfordshire Class/Team Research & Development/archive"
# List all the files in the directory (assuming they are CSV files)
files <- list.files(directory, full.names = TRUE, pattern = "\\.csv$")
# Read all datasets into a list
datasets <- lapply(files, read.csv)
# Check and convert 'price' and 'year' columns in each dataset
datasets <- lapply(datasets, function(df) {
# Convert 'price' column to numeric
df$price <- as.numeric(as.character(df$price))
# Convert 'year' column to numeric
df$year <- as.numeric(as.character(df$year))
# Convert 'mileage' column to numeric if it's not already
if (is.character(df$mileage)) {
df$mileage <- as.numeric(as.character(df$mileage))
}
return(df)
})
# Combine all datasets into one dataframe
combined_data <- bind_rows(datasets)
# Clean the combined data to remove rows with NA values in 'price', 'year', or 'mileage'
cleaned_data <- combined_data %>%
filter(!is.na(price) & !is.na(year) & !is.na(mileage))
# Check the structure of the cleaned data
str(cleaned_data)
# Perform Pearson's correlation test
correlation_result <- cor.test(cleaned_data$year, cleaned_data$price, method = "pearson")
# Print the Pearson correlation test results
print(correlation_result)
# Create a histogram of 'price' grouped by 'year'
ggplot(cleaned_data, aes(x = price, fill = as.factor(year))) +
geom_histogram(binwidth = 1000, alpha = 0.6, position = "identity", color = "black") +
labs(title = "Histogram of Price by Year",
x = "Price",
y = "Frequency",
fill = "Year") +
theme_minimal() +
scale_fill_viridis_d()  # Adds a color palette for years
# Save the histogram as a PNG file
ggsave("histogram_price_by_year.png")
# Optional: Print the cleaned data (you can adjust the number of rows to print)
print(head(cleaned_data))
install.packages("tidyverse")
